import java.util.LinkedList;
import java.util.List;
import java.util.Objects;

public class ScrabbleGame {
    ScrabbleField sf = new ScrabbleField();
    Regex rg = new Regex();
    Extractor ex = new Extractor();
    Bag b1 = new Bag();
    Bag b2 = new Bag();
    Error er = new Error();


    private List<String> words = new LinkedList<>();
    private List<String> wordsCoordinate = new LinkedList<>();
    private int gameCounter;

    private List<String> postfixFunction(String expression) {
        List<String> stack = new LinkedList<String>();
        for (int i = 0; i < expression.length(); i++) {
            if (isNumber(expression.substring(i, i + 1))) {
                stack.add(expression.substring(i, i + 1));
            } else if (isOperator(expression.substring(i, i + 1))) {
                int cacheOne = Integer.parseInt(stack.get(0));
                stack.remove(0);
                int cacheTwo = Integer.parseInt(stack.get(0));
                stack.remove(0);
                int result = calculate(cacheTwo, cacheOne, expression.substring(i, i + 1));
                stack.add(Integer.toString(result));
            }
        }
        return stack;
    }

    private boolean isNumber(String c) {
        return c.matches(rg.getRegexNumber());
    }

    private boolean isOperator(String c) {
        return c.matches(rg.getRegexOperator());
    }

    private int calculate(int cacheOne, int cacheTwo, String operator) {
        if (operator.matches("[+]")) {
            return cacheOne + cacheTwo;
        } else if (operator.matches("[-]")) {
            return cacheTwo - cacheOne;
        } else {
            return cacheOne * cacheTwo;
        }
    }



    public List<String> getWords() {
        return words;
    }


    public List<String> getWordsCoordinate() {
        return wordsCoordinate;
    }

    public void setWords(List<String> words) {
        this.words = words;
    }

    public void setWordsCoordinate(List<String> wordsCoordinate) {
        this.wordsCoordinate = wordsCoordinate;
    }

    private int calculateScoreOne() {
        int scorePlayerOne = 0;
        for (int i = 0; i < getWords().size(); i++) {
            if (whichWordWhichPlayer(i) == 1) {
                scorePlayerOne = scorePlayerOne + Integer.parseInt(postfixFunction(getWords().get(i)).get(0));
            }
        }
        return scorePlayerOne;
    }

    private int calculateScoreTwo() {
        int scorePlayerTwo = 0;

        for (int i = 0; i < getWords().size(); i++) {
            if (whichWordWhichPlayer(i) == 2) {
                scorePlayerTwo = scorePlayerTwo + Integer.parseInt(postfixFunction(getWords().get(i)).get(0));
            }
        }
        return scorePlayerTwo;
    }

    private void scoreOutOne() {
        System.out.println(calculateScoreOne());
    }

    private void scoreOutTwo() {
        System.out.println(calculateScoreTwo());
    }

    public void score(String userInput) {
        if (ex.getBagScorePlayer(userInput).matches(rg.getRegexPlayerOne())) {
            scoreOutOne();
        } else if (ex.getBagScorePlayer(userInput).matches(rg.getRegexPlayerTwo())) {
            scoreOutTwo();
        } else {
            er.noValidPlayer();
        }
    }

    public void printField() {
        sf.printField();
    }

    public void printBag(String userInput) {
        if (ex.getBagScorePlayer(userInput).matches(rg.getRegexPlayerOne())) {
            b1.printBag();
        } else if (ex.getBagScorePlayer(userInput).matches(rg.getRegexPlayerTwo())) {
            b2.printBag();
        } else {
            er.noValidPlayer();
        }
    }

    private boolean checkForTokenInBag(String userInput, String currentPlayer) {
        if (currentPlayer.matches(rg.getRegexPlayerOne()) && b1.tokensMinusBag(userInput)) {
            return b1.lookForToken(userInput);
        }
        if (currentPlayer.matches(rg.getRegexPlayerTwo()) && b2.tokensMinusBag(userInput)) {
            return b2.lookForToken(userInput);
        }
        return false;
    }

    private void takeTokensOutOfBag(String userInput, String currentPlayer) {
        if (currentPlayer.matches(rg.getRegexPlayerOne())) {
            b1.removeUsedTokensBag(userInput);
        }
        if (currentPlayer.matches(rg.getRegexPlayerTwo())) {
            b2.removeUsedTokensBag(userInput);
        }
    }

    private void placeToken(String userInput, String currentPlayer) {
        if (ex.getDirection(userInput).matches("H")) {
            sf.tokenPlacerH(userInput, currentPlayer);
        } else if (ex.getDirection(userInput).matches("V")) {
            sf.tokenPlacerV(userInput, currentPlayer);
        }
    }

    private void removeWrongTokenFromField(String userInput, String currentPlayer) {
        if (ex.getDirection(userInput).matches("H")) {
            sf.tokenRemoverH(userInput);
        } else if (ex.getDirection(userInput).matches("V")) {
            sf.tokenRemoverV(userInput);
        }
    }

    public void place(String userInput, String currentPlayer) {
        if (checkForTokenInBag(userInput, currentPlayer)) {
            if (sf.validMoveCheck(userInput)) {
                if (sf.directionCheck(userInput)) {
                    placeToken(userInput, currentPlayer);
                    if (allWordsEachTurn()) {
                        setPlayerCounter();
                        takeTokensOutOfBag(userInput, currentPlayer);
                        System.out.println("OK");
                    } else {
                        er.noPostFix();
                        removeWrongTokenFromField(userInput, currentPlayer);
                    }
                }
            } else {
                er.isolatedMove();
            }
        } else {
            er.wrongTokens();
        }
    }

    private void setPlayerCounter() {
        this.gameCounter = gameCounter + 1;
    }

    public int getGameCounter() {
        return gameCounter;
    }

    public void initialize(String startInputOne, String startInputTwo) {
        sf.setField();
        b1.fillBagTokens(startInputOne);
        b2.fillBagTokens(startInputTwo);
    }

    private int whichWordWhichPlayer(int j) {
        int playerOneCount = 0;
        int playerTwoCount = 0;
        for (int i = 0; i < getWords().get(j).length(); i++) {
            if (Objects.equals(ex.getWordCoordinateDirection(getWordsCoordinate().get(j)), "H")) {
                if (sf.getPlayerIDtoCoordinate(
                        Integer.parseInt(ex.getWordCoordinateRow(getWordsCoordinate().get(j))),
                        Integer.parseInt(ex.getWordCoordinateColumn(getWordsCoordinate().get(j))) + i) == 1) {
                    playerOneCount++;
                } else if (sf.getPlayerIDtoCoordinate(
                        Integer.parseInt(ex.getWordCoordinateRow(getWordsCoordinate().get(j))),
                        Integer.parseInt(ex.getWordCoordinateColumn(getWordsCoordinate().get(j))) + i) == 2) {
                    playerTwoCount++;
                }
            } else {
                if (sf.getPlayerIDtoCoordinate(
                        Integer.parseInt(ex.getWordCoordinateRow(getWordsCoordinate().get(j))) + i,
                        Integer.parseInt(ex.getWordCoordinateColumn(getWordsCoordinate().get(j)))) == 1) {
                    playerOneCount++;
                } else if (sf.getPlayerIDtoCoordinate(
                        Integer.parseInt(ex.getWordCoordinateRow(getWordsCoordinate().get(j))) + i,
                        Integer.parseInt(ex.getWordCoordinateColumn(getWordsCoordinate().get(j))) + 1) == 2) {
                    playerTwoCount++;
                }
            }
        }
        if (playerTwoCount < playerOneCount) {
            return 1;
        } else if (playerOneCount < playerTwoCount) {
            return 2;
        }
        return 0;
    }



    private boolean allWordsEachTurn() {
        int tokenCounter = 0;
        int rowCounter = 0;
        int columnCounter = 0;
        List<String> words = new LinkedList<>();
        List<String> wordsCoordinate = new LinkedList<>();

        //each Row:
        for (rowCounter = 0; rowCounter < sf.getField().length; rowCounter++) {
            StringBuilder sb = new StringBuilder();
            columnCounter = 0;
            tokenCounter = 0;
            while (columnCounter < sf.getField().length - 1) {
                sb = new StringBuilder();
                tokenCounter = 0;
                while ((sf.getField()[rowCounter][columnCounter].matches(" "))) {
                    if (columnCounter < sf.getField().length - 1) {
                        columnCounter++;
                    } else break;
                }
                while (!(sf.getField()[rowCounter][columnCounter].matches(" "))) {
                    tokenCounter++;
                    sb.append(sf.getField()[rowCounter][columnCounter]);
                    if (columnCounter < sf.getField().length - 1) {
                        columnCounter++;
                    } else break;
                }
                if (!(postfixFunctionBoolean(sb.toString()))) {
                    return false;
                } else {
                    if (sb.toString().length() > 2) {
                        words.add(sb.toString());
                        wordsCoordinate.add(Integer.toString(rowCounter) +
                                Integer.toString(columnCounter - tokenCounter) + "H");
                    }
                }
            }
        }
        rowCounter = 0;
        //each column
        for (columnCounter = 0; columnCounter < sf.getField().length; columnCounter++) {
            StringBuilder sb = new StringBuilder();
            rowCounter = 0;
            tokenCounter = 0;
            while (rowCounter < sf.getField().length - 1) {
                sb = new StringBuilder();
                tokenCounter = 0;
                while ((sf.getField()[rowCounter][columnCounter].matches(" "))) {
                    if (rowCounter < sf.getField().length - 1) {
                        rowCounter++;
                    } else break;
                }
                while (!(sf.getField()[rowCounter][columnCounter].matches(" "))) {
                    tokenCounter++;
                    sb.append(sf.getField()[rowCounter][columnCounter]);
                    if (rowCounter < sf.getField().length - 1) {
                        rowCounter++;
                    } else break;
                }
                if (!(postfixFunctionBoolean(sb.toString()))) {
                    return false;
                } else {
                    if (sb.toString().length() > 2) {
                        words.add(sb.toString());
                        wordsCoordinate.add(Integer.toString(rowCounter - tokenCounter) +
                                Integer.toString(columnCounter) + "V");
                    }
                }
            }
        }
        setWords(words);
        setWordsCoordinate(wordsCoordinate);
        return true;
    }

    private boolean postfixFunctionBoolean(String expression) {
        List<String> stack = new LinkedList<String>();
        if (expression.length() < 2) {
            return true;
        }
        if (expression.length() == 2) {
            return false;
        }
        for (int i = 0; i < expression.length(); i++) {
            if (isNumber(expression.substring(i, i + 1))) {
                stack.add(expression.substring(i, i + 1));
            } else if (isOperator(expression.substring(i, i + 1))) {
                if (stack.size() == 0) {
                    return false;
                }
                int cacheOne = Integer.parseInt(stack.get(0));
                stack.remove(0);
                if (stack.size() == 0) {
                    return false;
                }
                int cacheTwo = Integer.parseInt(stack.get(0));
                stack.remove(0);
                int result = calculate(cacheTwo, cacheOne, expression.substring(i, i + 1));
                stack.add(Integer.toString(result));
            }
        }
        return stack.size() == 1;
    }

    public void endGame() {
        int scoreOne=calculateScoreOne();
        int scoreTwo = calculateScoreTwo();
        System.out.println(scoreOne);
        System.out.println(scoreTwo);
        if (scoreOne < scoreTwo) {
            System.out.println("P2 wins");
        } else if (scoreTwo < scoreOne) {
            System.out.println("P1 wins");
        } else {
            System.out.println("draw");
        }
    }
}
